"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "./lib/api/learning.js":
/*!*****************************!*\
  !*** ./lib/api/learning.js ***!
  \*****************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   advanceLearningPhase: function() { return /* binding */ advanceLearningPhase; },\n/* harmony export */   completeLesson: function() { return /* binding */ completeLesson; },\n/* harmony export */   createImmersionSession: function() { return /* binding */ createImmersionSession; },\n/* harmony export */   generateInteractiveLesson: function() { return /* binding */ generateInteractiveLesson; },\n/* harmony export */   generateSubjectLesson: function() { return /* binding */ generateSubjectLesson; },\n/* harmony export */   getImmersionSessions: function() { return /* binding */ getImmersionSessions; },\n/* harmony export */   getLearningPhase: function() { return /* binding */ getLearningPhase; },\n/* harmony export */   getLesson: function() { return /* binding */ getLesson; },\n/* harmony export */   getLessons: function() { return /* binding */ getLessons; },\n/* harmony export */   trackLessonProgress: function() { return /* binding */ trackLessonProgress; }\n/* harmony export */ });\n/* harmony import */ var _client__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./client */ \"./lib/api/client.js\");\n\n/**\r\n * Get the user's current learning phase\r\n * @returns {Promise<Object>} - Response with learning phase data\r\n */ async function getLearningPhase() {\n    try {\n        const response = await _client__WEBPACK_IMPORTED_MODULE_0__.apiClient.get(\"/api/learning_phase\");\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error fetching learning phase:\", error);\n        // Return mock data in development environment\n        if (true) {\n            return {\n                success: true,\n                phase: {\n                    id: 1,\n                    phase_type: \"immersion\",\n                    immersion_hours: 12.5,\n                    target_immersion_hours: 20,\n                    is_ready_for_output: false,\n                    created_at: new Date().toISOString(),\n                    updated_at: new Date().toISOString()\n                }\n            };\n        }\n        return {\n            success: false,\n            message: ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"Failed to fetch learning phase\"\n        };\n    }\n}\n/**\r\n * Get the user's immersion sessions\r\n * @returns {Promise<Object>} - Response with immersion sessions array\r\n */ async function getImmersionSessions() {\n    try {\n        const response = await _client__WEBPACK_IMPORTED_MODULE_0__.apiClient.get(\"/api/immersion_sessions\");\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error fetching immersion sessions:\", error);\n        // Return mock data in development environment\n        if (true) {\n            return {\n                success: true,\n                sessions: [\n                    {\n                        id: 1,\n                        user_id: 1,\n                        content_source_id: null,\n                        session_type: \"listening\",\n                        duration_minutes: 45,\n                        notes: \"Listened to Spanish podcast about cooking\",\n                        created_at: new Date(Date.now() - 2 * 86400000).toISOString() // 2 days ago\n                    },\n                    {\n                        id: 2,\n                        user_id: 1,\n                        content_source_id: null,\n                        session_type: \"reading\",\n                        duration_minutes: 30,\n                        notes: \"Read a short story in Spanish\",\n                        created_at: new Date(Date.now() - 86400000).toISOString() // 1 day ago\n                    },\n                    {\n                        id: 3,\n                        user_id: 1,\n                        content_source_id: null,\n                        session_type: \"watching\",\n                        duration_minutes: 60,\n                        notes: \"Watched a Spanish movie with subtitles\",\n                        created_at: new Date().toISOString() // Today\n                    }\n                ],\n                total_hours: 2.25,\n                count: 3\n            };\n        }\n        return {\n            success: false,\n            message: ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"Failed to fetch immersion sessions\"\n        };\n    }\n}\n/**\r\n * Advance the user from immersion to output phase\r\n * @returns {Promise<Object>} - Response with updated learning phase\r\n */ async function advanceLearningPhase() {\n    try {\n        const response = await _client__WEBPACK_IMPORTED_MODULE_0__.apiClient.post(\"/api/learning_phase/advance\");\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error advancing learning phase:\", error);\n        // Return mock data in development environment\n        if (true) {\n            return {\n                success: true,\n                message: \"Advanced to output phase\",\n                phase: {\n                    id: 1,\n                    phase_type: \"output\",\n                    immersion_hours: 20,\n                    target_immersion_hours: 20,\n                    is_ready_for_output: true,\n                    created_at: new Date(Date.now() - 30 * 86400000).toISOString(),\n                    updated_at: new Date().toISOString()\n                }\n            };\n        }\n        return {\n            success: false,\n            message: ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"Failed to advance learning phase\"\n        };\n    }\n}\n/**\r\n * Create a new immersion session\r\n * @param {Object} sessionData - Session data\r\n * @param {string} sessionData.session_type - Type of session (listening, reading, watching)\r\n * @param {number} sessionData.duration_minutes - Duration in minutes\r\n * @param {string} sessionData.notes - Optional notes about the session\r\n * @returns {Promise<Object>} - Response with created session and updated learning phase\r\n */ async function createImmersionSession(sessionData) {\n    try {\n        const response = await _client__WEBPACK_IMPORTED_MODULE_0__.apiClient.post(\"/api/immersion_sessions\", sessionData);\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error creating immersion session:\", error);\n        // Return mock data in development environment\n        if (true) {\n            const newSession = {\n                id: Math.floor(Math.random() * 1000) + 4,\n                user_id: 1,\n                content_source_id: sessionData.content_source_id || null,\n                session_type: sessionData.session_type,\n                duration_minutes: sessionData.duration_minutes,\n                notes: sessionData.notes || \"\",\n                created_at: new Date().toISOString()\n            };\n            // Calculate new immersion hours\n            const hoursToAdd = sessionData.duration_minutes / 60;\n            return {\n                success: true,\n                session: newSession,\n                phase: {\n                    id: 1,\n                    phase_type: \"immersion\",\n                    immersion_hours: 12.5 + hoursToAdd,\n                    target_immersion_hours: 20,\n                    is_ready_for_output: 12.5 + hoursToAdd >= 20,\n                    created_at: new Date(Date.now() - 30 * 86400000).toISOString(),\n                    updated_at: new Date().toISOString()\n                }\n            };\n        }\n        return {\n            success: false,\n            message: ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"Failed to create immersion session\"\n        };\n    }\n}\n/**\r\n * Get a list of lessons\r\n * @param {number} limit - Maximum number of lessons to return\r\n * @param {string} level - Filter by level (Beginner, Intermediate, Advanced)\r\n * @returns {Promise<Object>} - Response with lessons array\r\n */ async function getLessons() {\n    let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 20, level = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;\n    try {\n        const params = new URLSearchParams();\n        if (limit) params.append(\"limit\", limit.toString());\n        if (level) params.append(\"level\", level);\n        const response = await _client__WEBPACK_IMPORTED_MODULE_0__.apiClient.get(\"/lessons?\".concat(params.toString()));\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error fetching lessons:\", error);\n        // Return mock data in development environment\n        if (true) {\n            return {\n                success: true,\n                lessons: generateMockLessons(limit, level)\n            };\n        }\n        return {\n            success: false,\n            message: ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"Failed to fetch lessons\"\n        };\n    }\n}\n/**\r\n * Get a specific lesson by ID\r\n * @param {string} lessonId - The ID of the lesson to retrieve\r\n * @returns {Promise<Object>} - Response with lesson data\r\n */ async function getLesson(lessonId) {\n    try {\n        const response = await _client__WEBPACK_IMPORTED_MODULE_0__.apiClient.get(\"/lessons/\".concat(lessonId));\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error fetching lesson \".concat(lessonId, \":\"), error);\n        // Return mock data in development environment\n        if (true) {\n            return {\n                success: true,\n                lesson: generateMockLesson(lessonId)\n            };\n        }\n        return {\n            success: false,\n            message: ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"Failed to fetch lesson\"\n        };\n    }\n}\n/**\r\n * Track user progress on a lesson\r\n * @param {string} lessonId - The ID of the lesson\r\n * @param {number} progress - Progress percentage (0-100)\r\n * @returns {Promise<Object>} - Response with success status\r\n */ async function trackLessonProgress(lessonId, progress) {\n    try {\n        const response = await _client__WEBPACK_IMPORTED_MODULE_0__.apiClient.post(\"/lessons/\".concat(lessonId, \"/progress\"), {\n            progress\n        });\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error tracking progress for lesson \".concat(lessonId, \":\"), error);\n        // Return mock success in development environment\n        if (true) {\n            return {\n                success: true,\n                message: \"Progress tracked successfully (mock)\"\n            };\n        }\n        return {\n            success: false,\n            message: ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"Failed to track lesson progress\"\n        };\n    }\n}\n/**\r\n * Mark a lesson as complete\r\n * @param {string} lessonId - The ID of the lesson\r\n * @returns {Promise<Object>} - Response with success status\r\n */ async function completeLesson(lessonId) {\n    try {\n        const response = await _client__WEBPACK_IMPORTED_MODULE_0__.apiClient.post(\"/lessons/\".concat(lessonId, \"/complete\"));\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error marking lesson \".concat(lessonId, \" as complete:\"), error);\n        // Return mock success in development environment\n        if (true) {\n            return {\n                success: true,\n                message: \"Lesson marked as complete (mock)\"\n            };\n        }\n        return {\n            success: false,\n            message: ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"Failed to mark lesson as complete\"\n        };\n    }\n}\n/**\r\n * Generate an interactive lesson\r\n * @param {Object} params - Lesson parameters\r\n * @param {string} params.language - Target language\r\n * @param {string} params.level - Difficulty level\r\n * @param {string} params.topic - Lesson topic\r\n * @param {boolean} params.task_based - Whether to include a task\r\n * @returns {Promise<Object>} - Response with generated lesson\r\n */ async function generateInteractiveLesson(params) {\n    try {\n        const response = await _client__WEBPACK_IMPORTED_MODULE_0__.apiClient.post(\"/lessons/generate/interactive\", params);\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error generating interactive lesson:\", error);\n        // Return mock success in development environment\n        if (true) {\n            return {\n                success: true,\n                lesson: {\n                    id: Math.random().toString(36).substring(2, 10),\n                    language: params.language,\n                    level: params.level,\n                    topic: params.topic,\n                    task_based: params.task_based,\n                    content: generateMockLessonContent(params),\n                    timestamp: new Date().toISOString()\n                },\n                message: \"Lesson generated successfully (mock)\"\n            };\n        }\n        return {\n            success: false,\n            message: ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"Failed to generate lesson\"\n        };\n    }\n}\n/**\r\n * Generate a subject-based lesson\r\n * @param {Object} params - Lesson parameters\r\n * @param {string} params.language - Target language\r\n * @param {string} params.level - Difficulty level\r\n * @param {string} params.subject - Academic subject\r\n * @param {string} params.topic - Specific topic within the subject\r\n * @returns {Promise<Object>} - Response with generated lesson\r\n */ async function generateSubjectLesson(params) {\n    try {\n        const response = await _client__WEBPACK_IMPORTED_MODULE_0__.apiClient.post(\"/lessons/generate/subject\", params);\n        return response.data;\n    } catch (error) {\n        var _error_response_data, _error_response;\n        console.error(\"Error generating subject lesson:\", error);\n        // Return mock success in development environment\n        if (true) {\n            return {\n                success: true,\n                lesson: {\n                    id: Math.random().toString(36).substring(2, 10),\n                    language: params.language,\n                    level: params.level,\n                    subject: params.subject,\n                    topic: params.topic,\n                    content: generateMockSubjectLessonContent(params),\n                    timestamp: new Date().toISOString()\n                },\n                message: \"Subject lesson generated successfully (mock)\"\n            };\n        }\n        return {\n            success: false,\n            message: ((_error_response = error.response) === null || _error_response === void 0 ? void 0 : (_error_response_data = _error_response.data) === null || _error_response_data === void 0 ? void 0 : _error_response_data.message) || \"Failed to generate subject lesson\"\n        };\n    }\n}\n// Helper functions for generating mock data\nfunction generateMockLessons() {\n    let limit = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 20, level = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null;\n    const mockLessons = [\n        {\n            id: \"1\",\n            title: \"Basic Greetings\",\n            language: \"Spanish\",\n            level: \"Beginner\",\n            description: \"Learn common greetings and introductions in Spanish.\",\n            imageUrl: \"/static/img/lessons/greetings.jpg\",\n            duration: \"30 min\",\n            completionRate: 0\n        },\n        {\n            id: \"2\",\n            title: \"Food and Dining\",\n            language: \"Spanish\",\n            level: \"Beginner\",\n            description: \"Vocabulary and phrases for ordering food and dining out.\",\n            imageUrl: \"/static/img/lessons/food.jpg\",\n            duration: \"45 min\",\n            completionRate: 0\n        },\n        {\n            id: \"3\",\n            title: \"Past Tense\",\n            language: \"Spanish\",\n            level: \"Intermediate\",\n            description: \"Learn how to talk about past events using preterite and imperfect tenses.\",\n            imageUrl: \"/static/img/lessons/past-tense.jpg\",\n            duration: \"60 min\",\n            completionRate: 0\n        },\n        {\n            id: \"4\",\n            title: \"Subjunctive Mood\",\n            language: \"Spanish\",\n            level: \"Advanced\",\n            description: \"Master the subjunctive mood for expressing uncertainty, desires, and hypotheticals.\",\n            imageUrl: \"/static/img/lessons/subjunctive.jpg\",\n            duration: \"75 min\",\n            completionRate: 0\n        },\n        {\n            id: \"5\",\n            title: \"Travel Vocabulary\",\n            language: \"Spanish\",\n            level: \"Beginner\",\n            description: \"Essential vocabulary and phrases for traveling in Spanish-speaking countries.\",\n            imageUrl: \"/static/img/lessons/travel.jpg\",\n            duration: \"45 min\",\n            completionRate: 0\n        },\n        {\n            id: \"6\",\n            title: \"Conditional Tense\",\n            language: \"Spanish\",\n            level: \"Intermediate\",\n            description: \"Learn to express hypothetical situations and polite requests using the conditional tense.\",\n            imageUrl: \"/static/img/lessons/conditional.jpg\",\n            duration: \"60 min\",\n            completionRate: 0\n        }\n    ];\n    // Filter by level if provided\n    let filtered = mockLessons;\n    if (level) {\n        filtered = mockLessons.filter((lesson)=>lesson.level === level);\n    }\n    // Limit the number of results\n    return filtered.slice(0, limit);\n}\nfunction generateMockLesson(lessonId) {\n    // Find a predefined mock lesson or generate a new one\n    const mockLessons = generateMockLessons();\n    const existingLesson = mockLessons.find((lesson)=>lesson.id === lessonId);\n    if (existingLesson) {\n        return {\n            ...existingLesson,\n            content: \"\\n# Lesson Objectives\\nBy the end of this lesson, you will be able to:\\n- Greet people in Spanish at different times of day\\n- Introduce yourself and ask someone's name\\n- Say goodbye in formal and informal situations\\n\\n# Vocabulary\\n- Hola - Hello\\n- Buenos d\\xedas - Good morning\\n- Buenas tardes - Good afternoon\\n- Buenas noches - Good evening/night\\n- Me llamo... - My name is...\\n- \\xbfC\\xf3mo te llamas? - What's your name? (informal)\\n- \\xbfC\\xf3mo se llama usted? - What's your name? (formal)\\n- Mucho gusto - Nice to meet you\\n- Adi\\xf3s - Goodbye\\n- Hasta luego - See you later\\n- Hasta ma\\xf1ana - See you tomorrow\\n- Chao - Bye (informal)\\n\\n# Grammar Points\\n## Formal vs. Informal Address\\nIn Spanish, there are two ways to address someone: formally (usted) and informally (t\\xfa). \\n- Use \\\"usted\\\" (often abbreviated as Ud.) for people you don't know well, older people, or in professional settings.\\n- Use \\\"t\\xfa\\\" for friends, family, children, or peers.\\n\\nThis affects verb conjugations and possessive forms:\\n- \\xbfC\\xf3mo te llamas? (informal) vs. \\xbfC\\xf3mo se llama usted? (formal)\\n- \\xbfDe d\\xf3nde eres? (informal) vs. \\xbfDe d\\xf3nde es usted? (formal)\\n\\n# Interactive Dialogue\\nMar\\xeda: \\xa1Hola! Buenos d\\xedas.\\nCarlos: Buenos d\\xedas. \\xbfC\\xf3mo est\\xe1s?\\nMar\\xeda: Muy bien, gracias. Me llamo Mar\\xeda. \\xbfC\\xf3mo te llamas?\\nCarlos: Me llamo Carlos. Mucho gusto.\\nMar\\xeda: Igualmente. \\xbfDe d\\xf3nde eres?\\nCarlos: Soy de M\\xe9xico. \\xbfY t\\xfa?\\nMar\\xeda: Soy de Espa\\xf1a. Estoy aqu\\xed de vacaciones.\\nCarlos: \\xa1Qu\\xe9 bien! Bueno, tengo que irme. Hasta luego.\\nMar\\xeda: Hasta ma\\xf1ana. Adi\\xf3s.\\n\\n# Practice Exercises\\n1. Match the greeting with the appropriate time of day:\\n   - Morning: _______\\n   - Afternoon: _______\\n   - Evening: _______\\n\\n2. Complete the dialogue:\\n   A: Hola, \\xbf_____ te llamas?\\n   B: Me _____ Juan. \\xbfY t\\xfa?\\n   A: Me llamo Ana. _____ gusto.\\n   B: Igualmente.\\n\\n3. Role-play: Practice introducing yourself to someone in:\\n   - A formal situation (meeting a professor)\\n   - An informal situation (meeting a fellow student)\\n\\n# Cultural Notes\\nIn Spanish-speaking countries, greetings often include physical contact. A handshake is common in formal situations, while friends might greet each other with a kiss on the cheek (the number varies by country). In Spain, two kisses (one on each cheek) is standard among friends, while in many Latin American countries, one kiss is more common.\\n\\n# Task Challenge\\nNext time you meet someone who speaks Spanish, try to have a complete greeting exchange in Spanish. Introduce yourself, ask their name, and say goodbye appropriately. Note any differences in how they respond compared to what you learned in this lesson.\\n      \",\n            timestamp: new Date().toISOString()\n        };\n    }\n    // Generate a random lesson if no matching ID found\n    return {\n        id: lessonId,\n        title: \"Custom Lesson\",\n        language: \"Spanish\",\n        level: \"Intermediate\",\n        description: \"A custom generated lesson for your learning needs.\",\n        imageUrl: null,\n        duration: \"45 min\",\n        completionRate: 0,\n        content: \"\\n# Lesson Objectives\\nBy the end of this lesson, you will be able to:\\n- Understand and use basic vocabulary related to your chosen topic\\n- Construct simple sentences using the grammar points covered\\n- Engage in a basic conversation about the topic\\n\\n# Vocabulary\\n- Key vocabulary item 1 - Translation\\n- Key vocabulary item 2 - Translation\\n- Key vocabulary item 3 - Translation\\n- Key vocabulary item 4 - Translation\\n- Key vocabulary item 5 - Translation\\n- Key vocabulary item 6 - Translation\\n- Key vocabulary item 7 - Translation\\n- Key vocabulary item 8 - Translation\\n\\n# Grammar Points\\n## Main Grammar Concept\\nExplanation of the main grammar concept for this lesson.\\n- Example 1\\n- Example 2\\n- Example 3\\n\\n## Secondary Grammar Concept\\nExplanation of a secondary grammar concept related to the lesson.\\n- Example 1\\n- Example 2\\n\\n# Interactive Dialogue\\nPerson A: First line of dialogue.\\nPerson B: Response to first line.\\nPerson A: Continuation of conversation.\\nPerson B: Further response.\\nPerson A: Question about the topic.\\nPerson B: Answer with new vocabulary.\\nPerson A: Follow-up question.\\nPerson B: Detailed answer using grammar points.\\nPerson A: Closing remark.\\nPerson B: Farewell.\\n\\n# Practice Exercises\\n1. Fill in the blanks exercise with key vocabulary.\\n\\n2. Sentence transformation exercise using the grammar points.\\n\\n3. Conversation completion exercise:\\n   A: _______ (greeting)\\n   B: _______ (response)\\n   A: _______ (question about topic)\\n   B: _______ (answer using vocabulary)\\n\\n# Cultural Notes\\nCultural information related to the lesson topic and how it's perceived or practiced in countries where the target language is spoken.\\n\\n# Task Challenge\\nA real-world task that requires application of the vocabulary and grammar learned in this lesson.\\n    \",\n        timestamp: new Date().toISOString()\n    };\n}\nfunction generateMockLessonContent(params) {\n    const { language, level, topic, task_based } = params;\n    return \"\\n# Lesson Objectives\\nBy the end of this lesson, you will be able to:\\n- Understand and use vocabulary related to \".concat(topic, \" in \").concat(language, \"\\n- Apply the grammar concepts covered in this \").concat(level, \" level lesson\\n- Engage in conversations about \").concat(topic, \"\\n\").concat(task_based ? \"- Complete a real-world task related to \" + topic : \"\", \"\\n\\n# Vocabulary\\n- Key vocabulary item 1 - Translation\\n- Key vocabulary item 2 - Translation\\n- Key vocabulary item 3 - Translation\\n- Key vocabulary item 4 - Translation\\n- Key vocabulary item 5 - Translation\\n- Key vocabulary item 6 - Translation\\n- Key vocabulary item 7 - Translation\\n- Key vocabulary item 8 - Translation\\n\\n# Grammar Points\\n## Main Grammar Concept\\nExplanation of the main grammar concept for this \").concat(level, \" level \").concat(language, \" lesson.\\n- Example 1\\n- Example 2\\n- Example 3\\n\\n## Secondary Grammar Concept\\nExplanation of a secondary grammar concept related to \").concat(topic, \".\\n- Example 1\\n- Example 2\\n\\n# Interactive Dialogue\\nPerson A: First line of dialogue about \").concat(topic, \".\\nPerson B: Response to first line.\\nPerson A: Continuation of conversation.\\nPerson B: Further response.\\nPerson A: Question about \").concat(topic, \".\\nPerson B: Answer with new vocabulary.\\nPerson A: Follow-up question.\\nPerson B: Detailed answer using grammar points.\\nPerson A: Closing remark.\\nPerson B: Farewell.\\n\\n# Practice Exercises\\n1. Fill in the blanks exercise with key vocabulary related to \").concat(topic, \".\\n\\n2. Sentence transformation exercise using the grammar points.\\n\\n3. Conversation completion exercise about \").concat(topic, \":\\n   A: _______ (greeting)\\n   B: _______ (response)\\n   A: _______ (question about \").concat(topic, \")\\n   B: _______ (answer using vocabulary)\\n\\n# Cultural Notes\\nCultural information related to \").concat(topic, \" and how it's perceived or practiced in \").concat(language, \"-speaking countries.\\n\\n\").concat(task_based ? \"# Task Challenge\\nA real-world task that requires you to use \".concat(language, \" to accomplish something related to \").concat(topic, \".\") : \"\", \"\\n  \");\n}\nfunction generateMockSubjectLessonContent(params) {\n    const { language, level, subject, topic } = params;\n    return \"\\n# Lesson Objectives\\nBy the end of this lesson, you will be able to:\\n- Understand key concepts about \".concat(topic, \" within \").concat(subject, \"\\n- Learn specialized \").concat(language, \" vocabulary related to \").concat(subject, \"\\n- Explain \").concat(topic, \" concepts using \").concat(language, \" at a \").concat(level, \" level\\n\\n# Vocabulary\\n- Subject-specific term 1 - Translation and definition\\n- Subject-specific term 2 - Translation and definition\\n- Subject-specific term 3 - Translation and definition\\n- Subject-specific term 4 - Translation and definition\\n- Subject-specific term 5 - Translation and definition\\n- Subject-specific term 6 - Translation and definition\\n- Subject-specific term 7 - Translation and definition\\n- Subject-specific term 8 - Translation and definition\\n\\n# Grammar Points\\n## Academic Language Structures\\nExplanation of language structures commonly used in \").concat(subject, \" discourse.\\n- Example 1\\n- Example 2\\n- Example 3\\n\\n## Technical Expression\\nHow to express technical concepts in \").concat(language, \".\\n- Example 1\\n- Example 2\\n\\n# Interactive Dialogue\\nTeacher: Introduction to \").concat(topic, \" in \").concat(subject, \".\\nStudent: Question about a concept.\\nTeacher: Explanation using subject terminology.\\nStudent: Follow-up question.\\nTeacher: Detailed answer with examples.\\nStudent: Question about application.\\nTeacher: Explanation of real-world application.\\nStudent: Final clarification question.\\nTeacher: Summary of key points.\\n\\n# Practice Exercises\\n1. Define the following terms related to \").concat(topic, \" in \").concat(language, \".\\n\\n2. Explain the following concept from \").concat(subject, \" in your own words.\\n\\n3. Solve this \").concat(subject, \" problem while explaining your process in \").concat(language, \":\\n   [Problem description related to \").concat(topic, \"]\\n\\n# Cultural Notes\\nHow \").concat(subject, \", particularly \").concat(topic, \", is taught or approached in \").concat(language, \"-speaking educational systems.\\n\\n# Task Challenge\\nResearch project: Find additional information about \").concat(topic, \" using \").concat(language, \" sources and prepare a short summary of what you learned.\\n  \");\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./lib/api/learning.js\n"));

/***/ })

});