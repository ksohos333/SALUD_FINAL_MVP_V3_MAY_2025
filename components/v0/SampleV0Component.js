import React from 'react';

// This is a sample component that simulates a V0-generated component
// In a real scenario, this would be generated by V0 and exported to your project
export default function SampleV0Component({ 
  title, 
  description, 
  primaryColor = 'blue',
  secondaryColor = 'gray',
  showCTA = true,
  ctaText = 'Get Started',
  onCtaClick = () => console.log('CTA clicked')
}) {
  // Map color names to Tailwind classes
  const colorMap = {
    blue: {
      primary: 'bg-blue-600 hover:bg-blue-700',
      secondary: 'text-blue-600',
      light: 'bg-blue-50',
      border: 'border-blue-200'
    },
    green: {
      primary: 'bg-green-600 hover:bg-green-700',
      secondary: 'text-green-600',
      light: 'bg-green-50',
      border: 'border-green-200'
    },
    purple: {
      primary: 'bg-purple-600 hover:bg-purple-700',
      secondary: 'text-purple-600',
      light: 'bg-purple-50',
      border: 'border-purple-200'
    },
    red: {
      primary: 'bg-red-600 hover:bg-red-700',
      secondary: 'text-red-600',
      light: 'bg-red-50',
      border: 'border-red-200'
    },
    gray: {
      primary: 'bg-gray-600 hover:bg-gray-700',
      secondary: 'text-gray-600',
      light: 'bg-gray-50',
      border: 'border-gray-200'
    }
  };

  // Get color classes
  const primaryClasses = colorMap[primaryColor]?.primary || colorMap.blue.primary;
  const secondaryClasses = colorMap[secondaryColor]?.secondary || colorMap.gray.secondary;
  const lightBgClasses = colorMap[primaryColor]?.light || colorMap.blue.light;
  const borderClasses = colorMap[primaryColor]?.border || colorMap.blue.border;

  return (
    <div className={`rounded-lg overflow-hidden shadow-lg border ${borderClasses}`}>
      <div className={`p-6 ${lightBgClasses}`}>
        <div className="flex items-center mb-4">
          <div className={`w-12 h-12 rounded-full ${primaryClasses} flex items-center justify-center text-white mr-4`}>
            <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
            </svg>
          </div>
          <h3 className="text-2xl font-bold">{title}</h3>
        </div>
        
        <p className="text-gray-700 mb-6">{description}</p>
        
        <div className="space-y-3 mb-6">
          <Feature text="Responsive design" />
          <Feature text="Customizable colors" />
          <Feature text="Accessible components" />
        </div>
        
        {showCTA && (
          <button 
            onClick={onCtaClick}
            className={`${primaryClasses} text-white px-6 py-2 rounded-md transition-colors duration-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-${primaryColor}-500`}
          >
            {ctaText}
          </button>
        )}
      </div>
    </div>
  );
}

// Feature component with checkmark
function Feature({ text }) {
  return (
    <div className="flex items-center">
      <div className="w-5 h-5 rounded-full bg-green-100 flex items-center justify-center text-green-500 mr-3">
        <svg xmlns="http://www.w3.org/2000/svg" className="h-3 w-3" viewBox="0 0 20 20" fill="currentColor">
          <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
        </svg>
      </div>
      <span className="text-gray-700">{text}</span>
    </div>
  );
}
